name: macOS Test and Release
# This runs an OS-specific test, then builds and releases binaries for macOS (ARM and Intel) and publishes them to GitHub.
# It is triggered by the completion of the "Release Check" workflow when the CHANGELOG.md is updated and version tag is present.

permissions:
  contents: write  # Allow the workflow to write to the repository contents
  pull-requests: write  # Allow the workflow to write to pull requests

on:
  repository_dispatch:
    types: [trigger-release]  # Triggered by the 'repository-dispatch' event with 'trigger-release' type

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_TEST_DEBUG: 0
  CARGO_PROFILE_RELEASE_LTO: true
  CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
jobs:
  build:
    name: Build, Release, and Publish for macOS (ARM & Intel)
    runs-on: macos-latest  # Use macOS runner

    steps:
    # Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.client_payload.ref }}  # Use the ref from the repository-dispatch payload to checkout the specific commit

    - uses: Swatinem/rust-cache@v2
      with:
        cache-all-crates: true
    - uses: taiki-e/install-action@v2
      with:
        tool: nextest

    # Run Platform Tests
    - name: Run tests using cargo-nextest
      run: cargo nextest run --all-features  # Run all tests with nextest.nm
      continue-on-error: false  # Fail the job if tests do not pass

    # Add the x86_64 target to cross-compile for Intel macOS
    - name: Add x86_64 target for cross-compilation
      run: rustup target add x86_64-apple-darwin
 
    # Build for macOS (ARM)
    - name: Build for macOS (ARM)
      run: |
        cargo build --release --target aarch64-apple-darwin

    # Extract version tag from GitHub event (removing refs/tags/)
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    # Gzip the ARM binary as tod-<version>-MacOS-arm64.tar.gz
    - name: Gzipping the ARM binary
      run: |
        tar -czf target/release/tod-$VERSION-MacOS-arm64.tar.gz -C target/aarch64-apple-darwin/release tod

    # Hash the release binary for ARM
    - name: Hash ARM release binary
      run: |
        HASH=$(shasum -a 256 target/release/tod-$VERSION-MacOS-arm64.tar.gz | awk '{print $1}')
        echo "ARM HASH: $HASH"

    # Upload ARM binaries to GitHub release using softprops/action-gh-release
    - name: Upload MacOS ARM binary to GitHub release
      uses: softprops/action-gh-release@v2
      with:
        files: target/release/tod-$VERSION-MacOS-arm64.tar.gz
        tag_name: ${{ github.event.client_payload.tag_name }}  # Use the tag name passed directly in the webhook
        token: ${{ secrets.TOD_CONTENTS_READ_WRITE }}  # Use RELEASE_PAT token for authentication

    # Build for macOS (Intel)
    - name: Build for macOS (Intel)
      run: |
        cargo build --release --target x86_64-apple-darwin

    # Gzip the Intel binary as tod-<version>-MacOS-x86_64.tar.gz
    - name: Gzipping the Intel binary
      run: |
        tar -czf target/release/tod-$VERSION-MacOS-x86_64.tar.gz -C target/x86_64-apple-darwin/release tod

    # Hash the release binary for Intel
    - name: Hash Intel release binary
      run: |

    # Upload binaries to GitHub release using softprops/action-gh-release
    - name: Upload Intel binary to GitHub release
      uses: softprops/action-gh-release@v2
      with:
        files: target/release/tod-$$VERSION-MacOS-x86_64.tar.gz
        tag_name: ${{ github.event.client_payload.tag_name }}  # Use the tag from the payload
        token: ${{ secrets.TOD_CONTENTS_READ_WRITE }}  # Use RELEASE_PAT token for authentication
