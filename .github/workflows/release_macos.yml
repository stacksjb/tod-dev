name: macOS Test and Release
# This runs an OS-specific test, then builds and releases binaries for macOS (ARM and Intel) and publishes them to GitHub.
# It is triggered by the completion of the "Release Check" workflow when the CHANGELOG.md is updated and version tag is present.

permissions:
  contents: write  # Allow the workflow to write to the repository contents
  pull-requests: write  # Allow the workflow to write to pull requests

on:
  repository_dispatch:
    types: [trigger-release]  # Triggered by the 'repository-dispatch' event with 'trigger-release' type

jobs:
  build:
    name: Build, Release, and Publish for macOS (ARM & Intel)
    runs-on: macos-latest  # Use macOS runner

    steps:
    # Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.client_payload.ref }}  # Use the ref from the repository-dispatch payload to checkout the specific commit

    # Set up Rust toolchain
    - name: Set up Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    # Cache Cargo registry and build dependencies
    - name: Cache Cargo registry and build dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git/db
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    # Run Platform Tests
    - name: Run tests using cargo-nextest
      run: cargo nextest run --all-features  # Run all tests with nextest.
      continue-on-error: false  # Fail the job if tests do not pass

    # Add the x86_64 target to cross-compile for Intel macOS
    - name: Add x86_64 target for cross-compilation
      run: |
        rustup target add x86_64-apple-darwin
        echo "Added x86_64 target for cross-compilation"

    # Define the architectures and paths
    - name: Set environment variables
      run: |
        echo "ARCHITECTURES=aarch64 x86_64" >> $GITHUB_ENV
        echo "BUILD_PATH=target" >> $GITHUB_ENV
        echo "echo 'Reusable variables for architecture and build paths set.'"

    # Get version from tag once and set it as an environment variable
    - name: Get version tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    # Build for macOS (ARM)
    - name: Build for macOS (ARM)
      run: |
        ARCHITECTURE="aarch64"
        BUILD_PATH="$BUILD_PATH"
        echo "Building for macOS $ARCHITECTURE (ARM)"
        cargo build --release --target ${ARCHITECTURE}-apple-darwin
        echo "Build completed for $ARCHITECTURE"

    # Build for macOS (Intel)
    - name: Build for macOS (Intel)
      run: |
        ARCHITECTURE="x86_64"
        BUILD_PATH="$BUILD_PATH"
        echo "Building for macOS $ARCHITECTURE (Intel)"
        cargo build --release --target ${ARCHITECTURE}-apple-darwin
        echo "Build completed for $ARCHITECTURE"

    # Gzip the ARM binary with version and architecture in the filename
    - name: Gzipping the ARM binary
      run: |
        ARCHITECTURE="aarch64"
        BUILD_PATH="$BUILD_PATH"
        OUTPUT_FILE="tod-${VERSION}-macOS-arm64.tar.gz"
        tar -czf target/release/$OUTPUT_FILE -C $BUILD_PATH/${ARCHITECTURE}-apple-darwin/release tod
        echo "Created $OUTPUT_FILE"

    # Gzip the Intel binary with version and architecture in the filename
    - name: Gzipping the Intel binary
      run: |
        ARCHITECTURE="x86_64"
        BUILD_PATH="$BUILD_PATH"
        OUTPUT_FILE="tod-${VERSION}-macOS-x86_64.tar.gz"
        tar -czf target/release/$OUTPUT_FILE -C $BUILD_PATH/${ARCHITECTURE}-apple-darwin/release tod
        echo "Created $OUTPUT_FILE"

    # Hash the release binary for ARM
    - name: Hash ARM release binary
      run: |
        ARCHITECTURE="aarch64"
        BUILD_PATH="$BUILD_PATH"
        OUTPUT_FILE="tod-${VERSION}-macOS-arm64.tar.gz"
        HASH=$(shasum -a 256 target/release/$OUTPUT_FILE | awk '{print $1}')
        echo "${ARCHITECTURE} HASH: $HASH"

    # Hash the release binary for Intel
    - name: Hash Intel release binary
      run: |
        ARCHITECTURE="x86_64"
        BUILD_PATH="$BUILD_PATH"
        OUTPUT_FILE="tod-${VERSION}-macOS-x86_64.tar.gz"
        HASH=$(shasum -a 256 target/release/$OUTPUT_FILE | awk '{print $1}')
        echo "${ARCHITECTURE} HASH: $HASH"

    # Upload binaries to GitHub release using softprops/action-gh-release
    - name: Upload binaries to GitHub release
      uses: softprops/action-gh-release@v2.2.2
      with:
        files: |
          target/release/tod-${VERSION}-macOS-arm64.tar.gz
          target/release/tod-${VERSION}-macOS-x86_64.tar.gz
        token: ${{ secrets.TOD_CONTENTS_READ_WRITE }} 
